forEach: Aggregate
fileName: {{namePascalCase}}Cards.vue
path: frontend/src/components/listers
---
<template>
    <div>
        {{#if (checkGeneralization aggregateRoot.entities.relations nameCamelCase)}}
        <h1 style = "margin-left:4.5%; margin-top:-10px; cursor:pointer;" @click="load">{{namePascalCase}}</h1>
        <v-select
                label="TYPE"
                :items="btnList"
                @change="changeType"
                style="margin-left:4.5%; width:300px;"
        ></v-select>
        {{else}}
        <h1 style = "margin-left:4.5%; margin-top:-10px;">{{namePascalCase}}</h1>
        {{/if}}
        <v-col style="margin-bottom:40px;">
            <div class="text-center">
                <v-dialog
                        v-model="openDialog"
                        width="332.5"
                        fullscreen
                        hide-overlay
                        transition="dialog-bottom-transition"
                >
                    {{#if (checkGeneralization aggregateRoot.entities.relations nameCamelCase)}}
                    <component :offline="offline" class="video-card" :isNew="true" :editMode="true" v-model="newValue" 
                            @add="append" v-if="tick" v-bind:is="childType"/>
                    {{else}}
                    <{{namePascalCase}} :offline="offline" class="video-card" :isNew="true" :editMode="true" v-model="newValue" 
                            @add="append" v-if="tick"/>
                    {{/if}}

                    <v-btn
                            style="postition:absolute; top:2%; right:2%"
                            @click="closeDialog()"
                            depressed
                            icon 
                            absolute
                    >
                        <v-icon>mdi-close</v-icon>
                    </v-btn>
                </v-dialog>

                {{#if (checkGeneralization aggregateRoot.entities.relations nameCamelCase)}}
                <v-speed-dial v-model="btnDialog" style="position: absolute; bottom: 5%; right: 2%; z-index:99">
                    <template v-slot:activator>
                        <v-btn color="blue" fab dark large>
                            <v-icon v-if="btnDialog">
                                mdi-close
                            </v-icon>
                            <v-icon v-else>
                                mdi-plus
                            </v-icon>
                        </v-btn>
                    </template>
                    <v-btn 
                            v-for="(btn, idx) in btnList" :key="idx"
                            fab style="position:relative;"
                            @click="dialogOpen(btn)"
                    >
                        \{{ btn }}
                    </v-btn>
                </v-speed-dial>
                {{else}}
                <v-btn  color="blue" fab dark large
                        style="position:fixed; bottom: 5%; right: 2%; z-index:99"
                        @click="openDialog=true;"
                >
                    <v-icon>mdi-plus</v-icon>
                </v-btn>
                {{/if}}
            </div>
        </v-col>
        <v-row>
            {{#if (checkGeneralization aggregateRoot.entities.relations nameCamelCase)}}
            <component :offline="offline" class="video-card" 
                    v-for="(value, index) in values" v-bind:key="index"
                    v-model="values[index]" @delete="remove"
                    v-bind:is="values[index]._links.type.href.replace('/', '')"/>
            {{else}}
            <{{namePascalCase}} :offline="offline" class="video-card" v-for="(value, index) in values" v-model="values[index]" v-bind:key="index" @delete="remove"/>
            {{/if}}
        </v-row>
    </div>
</template>

<script>

    const axios = require('axios').default;
    import {{namePascalCase}} from './../{{namePascalCase}}.vue';

    export default {
        name: '{{namePascalCase}}Manager',
        components: {
            {{namePascalCase}},
        },
        props: {
            offline: Boolean
        },
        data: () => ({
            values: [],
            newValue: {},
            tick : true,
            openDialog : false,
            {{#if (checkGeneralization aggregateRoot.entities.relations nameCamelCase)}}
            childType: '',
            btnDialog: false,
            btnList: [],
            {{/if}}
        }),
        async created() {
            var me = this;
            if(me.offline){
                if(!me.values) me.values = [];
                return;
            } 

            var temp = await axios.get(axios.fixUrl('/{{namePlural}}'))
            {{#if (checkGeneralization aggregateRoot.entities.relations nameCamelCase)}}
            if(temp.data._embedded && typeof temp.data._embedded == 'object') {
                me.btnList = [{{#each aggregateRoot.entities.relations}}{{#if (isGeneralization targetElement.namePascalCase ../namePascalCase relationType)}}"{{namePascalCase}}",{{/if}}{{/each}}];
                Object.values(temp.data._embedded).forEach(function(val) {
                    if(val.length > 0) {
                        me.values = [...me.values, ...val]
                    }
                })
            }
            {{else}}
            me.values = temp.data._embedded.{{namePlural}};
            {{/if}}
            
            me.newValue = {
            {{#aggregateRoot.fieldDescriptors}}
            {{#if (isNotId nameCamelCase)}}
                '{{nameCamelCase}}': {{#setDefaultValue className isVO}}{{/setDefaultValue}},
            {{/if}}
            {{/aggregateRoot.fieldDescriptors}}
            }
        },
        methods:{
            {{#if (checkGeneralization aggregateRoot.entities.relations nameCamelCase)}}
            dialogOpen(val) {
                this.childType = val;
                this.openDialog = true;
                this.btnDialog = false;
            },
            {{/if}}
            closeDialog(){
                this.openDialog = false
            },
            append(value){
                this.tick = false
                this.newValue = {}
                this.values.push(value)
                
                this.$emit('input', this.values);

                this.$nextTick(function(){
                    this.tick=true
                })
            },
            remove(value){
                var where = -1;
                for(var i=0; i<this.values.length; i++){
                    if(this.values[i]._links.self.href == value._links.self.href){
                        where = i;
                        break;
                    }
                }

                if(where > -1){
                    this.values.splice(i, 1);
                    this.$emit('input', this.values);
                }
            },
            {{#if (checkGeneralization aggregateRoot.entities.relations nameCamelCase)}}
            async load() {
                var me = this;
                me.values = [];
                var temp = await axios.get(axios.fixUrl('/{{namePlural}}'))
                if(temp.data._embedded && typeof temp.data._embedded == 'object') {
                    me.btnList = [{{#each aggregateRoot.entities.relations}}{{#if (isGeneralization targetElement.namePascalCase ../namePascalCase relationType)}}"{{sourceElement.namePascalCase}}",{{/if}}{{/each}}];
                    Object.values(temp.data._embedded).forEach(function(val) {
                        if(val.length > 0) {
                            me.values = [...me.values, ...val]
                        }
                    })
                }
            },
            async changeType(value) {
                var temp = await axios.get(axios.fixUrl('/' + value))
                if(temp.data._embedded) {
                    this.values = temp.data._embedded[value]
                }
            },
            {{/if}}
        }
    };
</script>


<style>
    .video-card {
        width:300px; 
        margin-left:4.5%; 
        margin-top:50px; 
        margin-bottom:50px;
    }
</style>


<function>
    window.$HandleBars.registerHelper('isNotId', function (className) {
        return (className != 'id')
    })

    window.$HandleBars.registerHelper('setDefaultValue', function (className, isVO) {
        var date = (new Date(Date.now() - (new Date()).getTimezoneOffset() * 60000)).toISOString().substr(0, 10);
        if(className.endsWith("String")) {
            return "''";
        } else if(className.endsWith("Integer") || className.endsWith("Long") || className.endsWith("Double") || className.endsWith("Float")) {
            return "0";
        } else if(className.endsWith("Boolean")) {
            return "false";
        } else if(className.endsWith("Date")) {
            return "'" + date + "'";
        } else if(className.includes("List")) {
            return "[]";
        } else {
            if(isVO) {
               return "{}";
            } else {
                return "''";
            }
        }
    })

    window.$HandleBars.registerHelper('checkGeneralization', function (relations, name) {
        try {
            if (typeof relations == "undefined") {
                return 
            } else {
                for (var i = 0; i < relations.length; i ++ ) {
                    if (relations[i] != null) {
                        if (relations[i].targetElement != "undefined") {
                            if(relations[i].targetElement.name.toLowerCase() == name && relations[i].relationType.includes("Generalization")) {
                                return true;
                            }
                        }
                    }
                }
                return false;
            }
        } catch(e) {
            console.log(e)
        }
    });

    window.$HandleBars.registerHelper('isGeneralization', function (toName, name, type) {
        try {
            if(toName == null || name == null || type == null) {
                return false;
            } else {
                if(toName == name && type.includes("Generalization")) {
                    return true;
                } else {
                    return false;
                }
            }
        } catch(e) {
            console.log(e)
        }
    });
    
    window.$HandleBars.registerHelper('toURL', function (className) {

        if(className == "undefined" || className == null) {
            return
        }

        var pluralize = function(value, revert) {

            var plural = {
                '(quiz)$'               : "$1zes",
                '^(ox)$'                : "$1en",
                '([m|l])ouse$'          : "$1ice",
                '(matr|vert|ind)ix|ex$' : "$1ices",
                '(x|ch|ss|sh)$'         : "$1es",
                '([^aeiouy]|qu)y$'      : "$1ies",
                '(hive)$'               : "$1s",
                '(?:([^f])fe|([lr])f)$' : "$1$2ves",
                '(shea|lea|loa|thie)f$' : "$1ves",
                'sis$'                  : "ses",
                '([ti])um$'             : "$1a",
                '(tomat|potat|ech|her|vet)o$': "$1oes",
                '(bu)s$'                : "$1ses",
                '(alias)$'              : "$1es",
                '(octop)us$'            : "$1i",
                '(ax|test)is$'          : "$1es",
                '(us)$'                 : "$1es",
                '([^s]+)$'              : "$1s"
            };

            var singular = {
                '(quiz)zes$'             : "$1",
                '(matr)ices$'            : "$1ix",
                '(vert|ind)ices$'        : "$1ex",
                '^(ox)en$'               : "$1",
                '(alias)es$'             : "$1",
                '(octop|vir)i$'          : "$1us",
                '(cris|ax|test)es$'      : "$1is",
                '(shoe)s$'               : "$1",
                '(o)es$'                 : "$1",
                '(bus)es$'               : "$1",
                '([m|l])ice$'            : "$1ouse",
                '(x|ch|ss|sh)es$'        : "$1",
                '(m)ovies$'              : "$1ovie",
                '(s)eries$'              : "$1eries",
                '([^aeiouy]|qu)ies$'     : "$1y",
                '([lr])ves$'             : "$1f",
                '(tive)s$'               : "$1",
                '(hive)s$'               : "$1",
                '(li|wi|kni)ves$'        : "$1fe",
                '(shea|loa|lea|thie)ves$': "$1f",
                '(^analy)ses$'           : "$1sis",
                '((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$': "$1$2sis",
                '([ti])a$'               : "$1um",
                '(n)ews$'                : "$1ews",
                '(h|bl)ouses$'           : "$1ouse",
                '(corpse)s$'             : "$1",
                '(us)es$'                : "$1",
                's$'                     : ""
            };

            var irregular = {
                'move'   : 'moves',
                'foot'   : 'feet',
                'goose'  : 'geese',
                'sex'    : 'sexes',
                'child'  : 'children',
                'man'    : 'men',
                'tooth'  : 'teeth',
                'person' : 'people',
                'index'  : 'indexes'
            };

            var uncountable = [
                'sheep',
                'fish',
                'deer',
                'moose',
                'series',
                'species',
                'money',
                'rice',
                'information',
                'equipment'
            ];

            // save some time in the case that singular and plural are the same
            // console.log("value = " + value)
            if(uncountable.indexOf(value.toLowerCase()) >= 0) {
                return this;
            }

            // check for irregular forms
            for(var word in irregular) {
                if(revert) {
                    var pattern = new RegExp(irregular[word]+'$', 'i');
                    var replace = word;
                } else {
                    var pattern = new RegExp(word+'$', 'i');
                    var replace = irregular[word];
                }
                if(pattern.test(value)) {
                    return value.replace(pattern, replace);
                }
            }

            if(revert) {
                var array = singular;
            } else {
                var array = plural;
            }

            // check for matches using regular expressions
            for(var reg in array) {
                var pattern = new RegExp(reg, 'i');

                if(pattern.test(value)) {
                    return value.replace(pattern, array[reg]);
                }
            }

            return value;
        }
        //console.log(className)
        //console.log(pluralize(className.toLowerCase()))
        return pluralize(className.toLowerCase())
        //return (className.toLowerCase())
    })

</function>
forEach: Aggregate
fileName: {{namePascalCase}}.vue
path: frontend/src/components
---
<template>

    <v-card style="width:450px;" outlined>
        <template slot="progress">
            <v-progress-linear
                    color="deep-purple"
                    height="10"
                    indeterminate
            ></v-progress-linear>
        </template>

        <v-card-title v-if="value._links">
            {{namePascalCase}} # \{{value._links.self.href.split("/")[value._links.self.href.split("/").length - 1]}}
        </v-card-title >
        <v-card-title v-else>
            {{namePascalCase}}
        </v-card-title >

        <v-card-text>
        {{#aggregateRoot.fieldDescriptors}}

        {{}}
        {{#if (isNotId nameCamelCase)}}
        {{#if (isPrimitive className)}}
            <{{getPrimitiveType className}} label="{{namePascalCase}}" v-model="value.{{nameCamelCase}}" :editMode="editMode"/>
        {{else}}
            {{#checkVO className}}
            <{{className}} offline label="{{namePascalCase}}" v-model="value.{{nameCamelCase}}" :editMode="editMode" @change="change"/>
            {{/checkVO}}
            {{#checkEntityMember className}}
            <{{className}} offline label="{{namePascalCase}}" v-model="value.{{nameCamelCase}}" :editMode="editMode" @change="change"/>
            {{/checkEntityMember}}
            {{#checkListOfEntityMember className}}
            <{{getEntityClassNameOfList className}}Manager offline label="{{namePascalCase}}" v-model="value.{{nameCamelCase}}" :editMode="editMode" @change="change"/>
            {{/checkListOfEntityMember}}
        {{/if}}
        {{/if}}
        {{/aggregateRoot.fieldDescriptors}}
        </v-card-text>

        <v-card-actions>
            <v-spacer></v-spacer>
            <v-btn
                    color="deep-purple lighten-2"
                    text
                    @click="edit"
                    v-if="!editMode"
            >
                Edit
            </v-btn>
            <v-btn
                    color="deep-purple lighten-2"
                    text
                    @click="save"
                    v-else
            >
                Save
            </v-btn>
            <v-btn
                    color="deep-purple lighten-2"
                    text
                    @click="remove"
                    v-if="!editMode"
            >
                Delete
            </v-btn>
            <v-btn
                    color="deep-purple lighten-2"
                    text
                    @click="editMode = false"
                    v-if="editMode && !isNew"
            >
                Cancel
            </v-btn>
        </v-card-actions>
        <v-card-actions>
            <v-spacer></v-spacer>
            {{#if (isSelectedSecurity selectedSecurity)}}
            {{#commands}}
            {{^isRestRepository}}
            <v-btn  
                    {{#if (attachedActorName actorName)}}
                    :disabled="!userRoles.includes('{{actorName}}')"
                    {{else}}
                    {{/if}}
                    v-if="!editMode"
                    color="deep-purple lighten-2"
                    text
                    {{#if (checkParam fieldDescriptors)}}
                    @click="open{{namePascalCase}}"
                    {{else}}
                    @click="{{nameCamelCase}}"
                    {{/if}}
            >
                {{namePascalCase}}
            </v-btn>
            {{#if (checkParam fieldDescriptors)}}
            <v-dialog v-model="{{nameCamelCase}}Diagram" width="500">
                <{{namePascalCase}}Command
                        @closeDialog="close{{namePascalCase}}"
                        @{{nameCamelCase}}="{{nameCamelCase}}"
                ></{{namePascalCase}}Command>
            </v-dialog>
            {{/if}}
            {{/isRestRepository}}
            {{/commands}}
            {{else}}
            {{#commands}}
            {{^isRestRepository}}
            <v-btn
                    v-if="!editMode"
                    color="deep-purple lighten-2"
                    text
                    {{#if (checkParam fieldDescriptors)}}
                    @click="open{{namePascalCase}}"
                    {{else}}
                    @click="{{nameCamelCase}}"
                    {{/if}}
            >
                {{namePascalCase}}
            </v-btn>
            {{#if (checkParam fieldDescriptors)}}
            <v-dialog v-model="{{nameCamelCase}}Diagram" width="500">
                <{{namePascalCase}}Command
                        @closeDialog="close{{namePascalCase}}"
                        @{{nameCamelCase}}="{{nameCamelCase}}"
                ></{{namePascalCase}}Command>
            </v-dialog>
            {{/if}}
            {{/isRestRepository}}
            {{/commands}}
            {{/if}}                 
        </v-card-actions>

        <v-snackbar
                v-model="snackbar.status"
                :top="true"
                :timeout="snackbar.timeout"
                color="error"
        >
            \{{ snackbar.text }}
            <v-btn dark text @click="snackbar.status = false">
                Close
            </v-btn>
        </v-snackbar>
    </v-card>

</template>

<script>
    const axios = require('axios').default;

    {{#aggregateRoot.fieldDescriptors}}
    {{#if (isNotId nameCamelCase)}}
    {{#if (isPrimitive className)}}
    {{else}}
    {{#checkVO className}}
    import {{className}} from './vo/{{className}}.vue';
    {{/checkVO}}
    {{/if}}
    {{/if}}
    {{/aggregateRoot.fieldDescriptors}}

    export default {
        name: '{{namePascalCase}}',
        components:{
        {{#aggregateRoot.fieldDescriptors}}
            {{#if (isNotId nameCamelCase)}}
            {{#if (isPrimitive className)}}
            {{else}}
            {{#checkVO className}}
            {{className}},
            {{/checkVO}}
            {{/if}}
            {{/if}}
        {{/aggregateRoot.fieldDescriptors}}
        },
        props: {
            value: [Object, String, Number, Boolean, Array],
            editMode: Boolean,
            isNew: Boolean,
            offline: Boolean,
        },
        data: () => ({
            snackbar: {
                status: false,
                timeout: 5000,
                text: ''
            },
        {{#commands}}
        {{^isRestRepository}}
        {{#if (checkParam fieldDescriptors)}}
            {{nameCamelCase}}Diagram: false,
        {{/if}}
        {{/isRestRepository}}
        {{/commands}}
        }),
        computed:{
            {{#if (isSelectedSecurity selectedSecurity)}}
            userRoles() {
                return localStorage.getItem('user_client_roles');
            } 
            {{/if}}
        },
        methods: {
            selectFile(){
                if(this.editMode == false) {
                    return false;
                }
                var me = this
                var input = document.createElement("input");
                input.type = "file";
                input.accept = "image/*";
                input.id = "uploadInput";
                
                input.click();
                input.onchange = function (event) {
                    var file = event.target.files[0]
                    var reader = new FileReader();

                    reader.onload = function () {
                        var result = reader.result;
                        me.imageUrl = result;
                        me.value.photo = result;
                        
                    };
                    reader.readAsDataURL( file );
                };
            },
            edit() {
                this.editMode = true;
            },
            async save(){
                try {
                    var temp = null;

                    if(!this.offline) {
                        if(this.isNew) {
                            temp = await axios.post(axios.fixUrl('/{{namePlural}}'), this.value)
                        } else {
                            temp = await axios.put(axios.fixUrl(this.value._links.self.href), this.value)
                        }
                    }

                    if(this.value!=null) {
                        for(var k in temp.data) this.value[k]=temp.data[k];
                    } else {
                        this.value = temp.data;
                    }

                    this.editMode = false;
                    this.$emit('input', this.value);

                    if (this.isNew) {
                        this.$emit('add', this.value);
                    } else {
                        this.$emit('edit', this.value);
                    }

                    location.reload()

                } catch(e) {
                    this.snackbar.status = true
                    if(e.response && e.response.data.message) {
                        this.snackbar.text = e.response.data.message
                    } else {
                        this.snackbar.text = e
                    }
                }
                
            },
            async remove(){
                try {
                    if (!this.offline) {
                        await axios.delete(axios.fixUrl(this.value._links.self.href))
                    }

                    this.editMode = false;
                    this.isDeleted = true;

                    this.$emit('input', this.value);
                    this.$emit('delete', this.value);

                } catch(e) {
                    this.snackbar.status = true
                    if(e.response && e.response.data.message) {
                        this.snackbar.text = e.response.data.message
                    } else {
                        this.snackbar.text = e
                    }
                }
            },
            change(){
                this.$emit('input', this.value);
            },
            {{#commands}}
            {{^isRestRepository}}
            {{#checkCommandPut controllerInfo.method}}
            async {{nameCamelCase}}({{#if (checkParam fieldDescriptors)}}params{{/if}}) {
                try {
                    if(!this.offline) {
                        var temp = await axios.put(axios.fixUrl(this.value._links['{{controllerInfo.apiPath}}'].href){{#if (checkParam fieldDescriptors)}}, params{{/if}})
                        for(var k in temp.data) {
                            this.value[k]=temp.data[k];
                        }
                    }

                    this.editMode = false;
                {{#if (checkParam fieldDescriptors)}}
                    this.close{{namePascalCase}}();
                {{/if}}
                } catch(e) {
                    this.snackbar.status = true
                    if(e.response && e.response.data.message) {
                        this.snackbar.text = e.response.data.message
                    } else {
                        this.snackbar.text = e
                    }
                }
            },
            {{#if (checkParam fieldDescriptors)}}
            open{{namePascalCase}}() {
                this.{{nameCamelCase}}Diagram = true;
            },
            close{{namePascalCase}}() {
                this.{{nameCamelCase}}Diagram = false;
            },
            {{/if}}
            {{/checkCommandPut}}
            {{#checkCommandDelete controllerInfo.method}}
            async {{nameCamelCase}}() {
                try {
                    if(!this.offline) {
                        await axios.delete(axios.fixUrl(this.value._links['{{nameCamelCase}}'].href))
                    }

                    this.editMode = false;
                    this.isDelete = true;
                    
                    this.$emit('input', this.value);
                    this.$emit('delete', this.value);
                } catch(e) {
                    this.snackbar.status = true
                    if(e.response && e.response.data.message) {
                        this.snackbar.text = e.response.data.message
                    } else {
                        this.snackbar.text = e
                    }
                }
            },
            {{/checkCommandDelete}}
            {{#checkCommandPost controllerInfo.method}}
            async {{nameCamelCase}}() {
                try {
                    if(!this.offline){
                        var temp = await axios.post(axios.fixUrl(this.value._links['{{controllerInfo.apiPath}}'].href))
                        for(var k in temp.data) this.value[k]=temp.data[k];
                    }

                    this.editMode = false;
                    
                    this.$emit('input', this.value);
                    this.$emit('delete', this.value);
                
                } catch(e) {
                    this.snackbar.status = true
                    if(e.response && e.response.data.message) {
                        this.snackbar.text = e.response.data.message
                    } else {
                        this.snackbar.text = e
                    }
                }
            },
            {{/checkCommandPost}}
            {{/isRestRepository}}
            {{/commands}}
            {{#aggregateRoot.operations}}
            {{#setOperations ../commands name}}
            async {{nameCamelCase}}() {
                try {
                    if(!this.offline) {
                        var temp = await axios.put(axios.fixUrl(this.value._links['{{nameCamelCase}}'].href))
                        for(var k in temp.data) {
                            this.value[k]=temp.data[k];
                        }
                    }

                    this.editMode = false;
                } catch(e) {
                    this.snackbar.status = true
                    if(e.response && e.response.data.message) {
                        this.snackbar.text = e.response.data.message
                    } else {
                        this.snackbar.text = e
                    }
                }
            },
            {{/setOperations}}
            {{/aggregateRoot.operations}}
        },
    }
</script>


<function>
    window.$HandleBars.registerHelper('checkCommandPut', function (info, options) {
        if(info.endsWith('PUT')){
            return options.fn(this);
        } else {
            options.inverse(this);
        }
    })

    window.$HandleBars.registerHelper('checkCommandDelete', function (info, options) {
        if(info.endsWith('DELETE')){
            return options.fn(this);
        } else {
            options.inverse(this);
        }
    })

    window.$HandleBars.registerHelper('checkCommandPost', function (info, options) {
        if(info.endsWith('POST')){
            return options.fn(this);
        } else {
            options.inverse(this);
        }
    })

    window.$HandleBars.registerHelper('isNotId', function (className) {
        return (className != 'id')
    })

    window.$HandleBars.registerHelper('isPrimitive', function (className) {
        if(className.includes("String") || className.includes("Integer") || className.includes("Long") || className.includes("Double") || className.includes("Float")
                || className.includes("Boolean") || className.includes("Date")){
            return true;
        } else {
            return false;
        }
    })

    window.$HandleBars.registerHelper('getPrimitiveType', function (className, options) {
        if(className.includes("String")) {
            if(this.isLob) {
                return "LargeObject";
            } else {
                return "String";
            }
        } else if(className.includes("Integer") || className.includes("Long") || className.includes("Double") || className.includes("Float")) {
            if(this.isLob) {
                return "LargeObject";
            } else {
                return "Number";
            }
        } else if(className.includes("Boolean")) {
            return "Boolean";
        } else if(className.includes("Date")) {
            return "Date";
        }
    })

    window.$HandleBars.registerHelper('checkVO', function (className, options) {
        if(className.endsWith("Address") || className.endsWith("Photo") || className.endsWith("User") || className.endsWith("Email") 
                || className.endsWith("Payment") || className.endsWith("Money") || className.endsWith("Weather") || className.endsWith("Rating")){
            return options.fn(this);
        }
    })

    window.$HandleBars.registerHelper('checkEntityMember', function (className, options) {
        if(!(className.endsWith("Address") || className.endsWith("Photo") || className.endsWith("User") || className.endsWith("Email") 
                || className.endsWith("Payment") || className.endsWith("Money") || className.endsWith("Weather") || className.endsWith("Rating")) && className.indexOf("java.")==-1 && className.indexOf("List")==-1) {
            return options.fn(this);
        } else {
            return options.inverse(this);
        }
    })

    window.$HandleBars.registerHelper('checkListOfEntityMember', function (className, options) {
        if(className.indexOf("List")==0){
            return options.fn(this);
        } else {
            return options.inverse(this);
        }
    })

    window.$HandleBars.registerHelper('getEntityClassNameOfList', function (listClassName) {
        var regex = /\<(.*?)\>/g;
        var match = regex.exec(listClassName);
        if (match) {
            return (match[1]);
        }
        return "NO-CLASS";
    })

    window.$HandleBars.registerHelper('setOperations', function (commands, name, options) {
        try {
            if(commands == "undefined") {
                return options.fn(this);
            }
            var isCmd = false;
            for (var i = 0; i < commands.length; i ++ ) {
                if(commands[i] != null) {
                    if (commands[i].name == name && commands[i].isRestRepository != true) {
                        isCmd = true
                    }
                }
            }
            if(isCmd) {
                return options.inverse(this);
            } else {
                return options.fn(this);
            }
        } catch(e) {
            console.log(e)
        }
    })

    window.$HandleBars.registerHelper('isSelectedSecurity', function (selectedSecurity) {
		try{
			if(!selectedSecurity)
				return false;

			if(selectedSecurity == 'isKeycloakSecurity'){
				return true;
			}

			return;
		} catch(e){
		console.log(e)
		}
  	});

    window.$HandleBars.registerHelper('attachedActorName', function (actorName, options) {
        try {
            if(actorName) {
                return true;
            } else {
                return false;
            }
        } catch(e) {
            console.log(e)
        }
    })

    window.$HandleBars.registerHelper('checkParam', function (fieldDescriptors, options) {
        try {
            if(fieldDescriptors == "undefined") {
                return false;
            } else {
                if(fieldDescriptors.length > 0) {
                    return true;
                } else {
                    return false;
                }
            }
        } catch(e) {
            console.log(e)
        }
    })

    window.$HandleBars.registerHelper('toURL', function (className) {

      var pluralize = function(value, revert){

        var plural = {
            '(quiz)$'               : "$1zes",
            '^(ox)$'                : "$1en",
            '([m|l])ouse$'          : "$1ice",
            '(matr|vert|ind)ix|ex$' : "$1ices",
            '(x|ch|ss|sh)$'         : "$1es",
            '([^aeiouy]|qu)y$'      : "$1ies",
            '(hive)$'               : "$1s",
            '(?:([^f])fe|([lr])f)$' : "$1$2ves",
            '(shea|lea|loa|thie)f$' : "$1ves",
            'sis$'                  : "ses",
            '([ti])um$'             : "$1a",
            '(tomat|potat|ech|her|vet)o$': "$1oes",
            '(bu)s$'                : "$1ses",
            '(alias)$'              : "$1es",
            '(octop)us$'            : "$1i",
            '(ax|test)is$'          : "$1es",
            '(us)$'                 : "$1es",
            '([^s]+)$'              : "$1s"
        };

        var singular = {
            '(quiz)zes$'             : "$1",
            '(matr)ices$'            : "$1ix",
            '(vert|ind)ices$'        : "$1ex",
            '^(ox)en$'               : "$1",
            '(alias)es$'             : "$1",
            '(octop|vir)i$'          : "$1us",
            '(cris|ax|test)es$'      : "$1is",
            '(shoe)s$'               : "$1",
            '(o)es$'                 : "$1",
            '(bus)es$'               : "$1",
            '([m|l])ice$'            : "$1ouse",
            '(x|ch|ss|sh)es$'        : "$1",
            '(m)ovies$'              : "$1ovie",
            '(s)eries$'              : "$1eries",
            '([^aeiouy]|qu)ies$'     : "$1y",
            '([lr])ves$'             : "$1f",
            '(tive)s$'               : "$1",
            '(hive)s$'               : "$1",
            '(li|wi|kni)ves$'        : "$1fe",
            '(shea|loa|lea|thie)ves$': "$1f",
            '(^analy)ses$'           : "$1sis",
            '((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$': "$1$2sis",        
            '([ti])a$'               : "$1um",
            '(n)ews$'                : "$1ews",
            '(h|bl)ouses$'           : "$1ouse",
            '(corpse)s$'             : "$1",
            '(us)es$'                : "$1",
            's$'                     : ""
        };

        var irregular = {
            'move'   : 'moves',
            'foot'   : 'feet',
            'goose'  : 'geese',
            'sex'    : 'sexes',
            'child'  : 'children',
            'man'    : 'men',
            'tooth'  : 'teeth',
            'person' : 'people',
            'index'  : 'indexes'
        };

        var uncountable = [
            'sheep', 
            'fish',
            'deer',
            'moose',
            'series',
            'species',
            'money',
            'rice',
            'information',
            'equipment'
        ];

        // save some time in the case that singular and plural are the same
        // console.log("value = " + value)
        if(uncountable.indexOf(value.toLowerCase()) >= 0) {
            return this;
        }

        // check for irregular forms
        for(var word in irregular) {

            if(revert) {
                var pattern = new RegExp(irregular[word]+'$', 'i');
                var replace = word;
            } else { 
                var pattern = new RegExp(word+'$', 'i');
                var replace = irregular[word];
            }
            if(pattern.test(value)) {
                return value.replace(pattern, replace);
            }
        }

        if(revert) {
            var array = singular;
        } else {
            var array = plural;
        }

        // check for matches using regular expressions
        for(var reg in array) {

            var pattern = new RegExp(reg, 'i');

            if(pattern.test(value)) {
                return value.replace(pattern, array[reg]);
            }
        }

        return value;
      }

      return pluralize(className.toLowerCase())
    })

</function>
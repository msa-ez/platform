forEach: Aggregate
fileName: {{namePascalCase}}.vue
path: frontend/src/components
---
<template>

<v-card style="width:300px; margin-left:5%;" outlined>
    <template slot="progress">
      <v-progress-linear
        color="deep-purple"
        height="10"
        indeterminate
      ></v-progress-linear>
    </template>

    <v-img
      style="width:290px; height:150px; border-radius:10px; position:relative; margin-left:5px; top:5px;"
      src="https://cdn.vuetifyjs.com/images/cards/cooking.png"
    ></v-img>

    <v-card-title v-if="value._links">
        {{namePascalCase}} # \{{value._links.self.href.split("/")[value._links.self.href.split("/").length - 1]}}
    </v-card-title >
    <v-card-title v-else>
        {{namePascalCase}}
    </v-card-title >

    <v-card-text style = "margin-left:-15px; margin-top:10px;">

      {{#aggregateRoot.fieldDescriptors}}
        {{#if (isNotId nameCamelCase)}}
          {{#if (isText className)}}
          <div class="grey--text ml-4" v-if="editMode" style = "margin-top:-20px;">
            <v-text-field label="{{namePascalCase}}" v-model="value.{{nameCamelCase}}"/>
          </div>
          <div class="grey--text ml-4" v-else>
            {{namePascalCase}} :  \{{value.{{nameCamelCase}} }}
          </div>

          {{/if}}
          {{#if (isNumber className)}}
          <div class="grey--text ml-4" v-if="editMode" style = "margin-top:-20px;">
            <v-text-field type="number" label="{{namePascalCase}}" v-model="value.{{nameCamelCase}}"/>
          </div>
          <div class="grey--text ml-4" v-else>
            {{namePascalCase}} :  \{{value.{{nameCamelCase}} }}
          </div>
          {{/if}}
          {{#if (isBoolean className)}}
          <div class="grey--text ml-4" v-if="editMode" style = "margin-top:-20px;">

            <v-radio-group
              v-model="value.{{nameCamelCase}}"
              row
            >
                <template v-slot:label>
                    <div>{{nameCamelCase}}</div>
                </template>
              <v-radio
                label="Y"
                value="true"
              ></v-radio>
              <v-radio
                label="N"
                value="false"
              ></v-radio>
            </v-radio-group>
          </div>
          <div class="grey--text ml-4" v-else>
            {{namePascalCase}} :  \{{value.{{nameCamelCase}} }}
          </div>
          {{/if}}
          {{#if (isDate className)}}
          <div class="grey--text ml-4" v-if="editMode" style = "margin-top:-20px;">
            <v-menu
                v-model="menu"
                width="290px"
            >
                <template v-slot:activator="{ on, attrs }">
                <v-text-field
                    v-model="value.{{nameCamelCase}}"
                    label="{{namePascalCase}}"
                    prepend-icon="mdi-calendar"
                    readonly
                    v-bind="attrs"
                    v-on="on"
                ></v-text-field>
                </template>
                <v-date-picker
                v-model="value.{{nameCamelCase}}"
                :min="new Date().toISOString().substr(0, 10)"
                @input="menu = false"
                ></v-date-picker>
            </v-menu>
          </div>
          <div class="grey--text ml-4" v-else>
            {{namePascalCase}} :  \{{value.{{nameCamelCase}} }}
          </div>
          {{/if}}
{{/if}}
      {{/aggregateRoot.fieldDescriptors}}

    </v-card-text>

    <v-divider class="mx-4"></v-divider>

    <v-card-actions style = "position:absolute; right:0; bottom:0;">
      <v-btn
        color="deep-purple lighten-2"
        text
        @click="edit"
        v-if="!editMode"
      >
        Edit
      </v-btn>
      <v-btn
        color="deep-purple lighten-2"
        text
        @click="save"
        v-else
      >
        Save
      </v-btn>
      <v-btn
        color="deep-purple lighten-2"
        text
        @click="remove"
        v-if="!editMode"
      >
        Delete
      </v-btn>
    </v-card-actions>
  </v-card>


</template>

<script>
  const axios = require('axios').default;

  export default {
    name: '{{namePascalCase}}',
    props: {
      value: Object,
      editMode: Boolean,
      isNew: Boolean
    },
    data: () => ({
        date: new Date().toISOString().substr(0, 10),
    }),

    methods: {
      edit(){
        this.editMode = true;
      },
      async save(){
        try{
          var temp = null;

          if(this.isNew){
            temp = await axios.post(axios.fixUrl('/{{namePlural}}'), this.value)
          }else{
            temp = await axios.put(axios.fixUrl(this.value._links.self.href), this.value)
          }

          this.value = temp.data;

          this.editMode = false;
          this.$emit('input', this.value);

          if(this.isNew){
            this.$emit('add', this.value);
          }else{
            this.$emit('edit', this.value);
          }

        }catch(e){
          alert(e.message)
        }
      },
      async remove(){
        try{
          await axios.delete(axios.fixUrl(this.value._links.self.href))
          this.editMode = false;
          this.isDeleted = true;

          this.$emit('input', this.value);
          this.$emit('delete', this.value);

        }catch(e){
          alert(e.message)
        }
      },

    }
  }
</script>


<function>
  window.$HandleBars.registerHelper('isNotId', function (className) {
    return (className != 'id')
  })

  window.$HandleBars.registerHelper('isText', function (className) {
    return (className.endsWith("String"))  
  })

  window.$HandleBars.registerHelper('isBoolean', function (className) {
    return (className.endsWith("Boolean"))  
  })

  window.$HandleBars.registerHelper('isNumber', function (className) {
    return (className.endsWith("Long") || className.endsWith("Integer"))  
  })

  window.$HandleBars.registerHelper('isDate', function (className) {
    return (className.endsWith("Date"))  
  })

  window.$HandleBars.registerHelper('toURL', function (className) {

    var pluralize = function(value, revert){

      var plural = {
          '(quiz)$'               : "$1zes",
          '^(ox)$'                : "$1en",
          '([m|l])ouse$'          : "$1ice",
          '(matr|vert|ind)ix|ex$' : "$1ices",
          '(x|ch|ss|sh)$'         : "$1es",
          '([^aeiouy]|qu)y$'      : "$1ies",
          '(hive)$'               : "$1s",
          '(?:([^f])fe|([lr])f)$' : "$1$2ves",
          '(shea|lea|loa|thie)f$' : "$1ves",
          'sis$'                  : "ses",
          '([ti])um$'             : "$1a",
          '(tomat|potat|ech|her|vet)o$': "$1oes",
          '(bu)s$'                : "$1ses",
          '(alias)$'              : "$1es",
          '(octop)us$'            : "$1i",
          '(ax|test)is$'          : "$1es",
          '(us)$'                 : "$1es",
          '([^s]+)$'              : "$1s"
      };

      var singular = {
          '(quiz)zes$'             : "$1",
          '(matr)ices$'            : "$1ix",
          '(vert|ind)ices$'        : "$1ex",
          '^(ox)en$'               : "$1",
          '(alias)es$'             : "$1",
          '(octop|vir)i$'          : "$1us",
          '(cris|ax|test)es$'      : "$1is",
          '(shoe)s$'               : "$1",
          '(o)es$'                 : "$1",
          '(bus)es$'               : "$1",
          '([m|l])ice$'            : "$1ouse",
          '(x|ch|ss|sh)es$'        : "$1",
          '(m)ovies$'              : "$1ovie",
          '(s)eries$'              : "$1eries",
          '([^aeiouy]|qu)ies$'     : "$1y",
          '([lr])ves$'             : "$1f",
          '(tive)s$'               : "$1",
          '(hive)s$'               : "$1",
          '(li|wi|kni)ves$'        : "$1fe",
          '(shea|loa|lea|thie)ves$': "$1f",
          '(^analy)ses$'           : "$1sis",
          '((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$': "$1$2sis",        
          '([ti])a$'               : "$1um",
          '(n)ews$'                : "$1ews",
          '(h|bl)ouses$'           : "$1ouse",
          '(corpse)s$'             : "$1",
          '(us)es$'                : "$1",
          's$'                     : ""
      };

      var irregular = {
          'move'   : 'moves',
          'foot'   : 'feet',
          'goose'  : 'geese',
          'sex'    : 'sexes',
          'child'  : 'children',
          'man'    : 'men',
          'tooth'  : 'teeth',
          'person' : 'people',
          'index'  : 'indexes'
      };

      var uncountable = [
          'sheep', 
          'fish',
          'deer',
          'moose',
          'series',
          'species',
          'money',
          'rice',
          'information',
          'equipment'
      ];

      // save some time in the case that singular and plural are the same
      console.log("value = " + value)
      if(uncountable.indexOf(value.toLowerCase()) >= 0)
      return this;

      // check for irregular forms
      for(var word in irregular){

          if(revert){
                  var pattern = new RegExp(irregular[word]+'$', 'i');
                  var replace = word;
          } else{ var pattern = new RegExp(word+'$', 'i');
                  var replace = irregular[word];
          }
          if(pattern.test(value))
              return value.replace(pattern, replace);
      }

      if(revert) var array = singular;
          else  var array = plural;

      // check for matches using regular expressions
      for(var reg in array){

          var pattern = new RegExp(reg, 'i');

          if(pattern.test(value))
              return value.replace(pattern, array[reg]);
      }

      return value;
    }

    return pluralize(className.toLowerCase())
  })

</function>
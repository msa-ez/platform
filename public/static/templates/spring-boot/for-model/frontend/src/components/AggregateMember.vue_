forEach: Entity
fileName: {{namePascalCase}}.vue
path: frontend/src/components
---
<template>
    {{#referenceClass}}
    <v-card outlined>
        <{{../referenceClass}}Picker v-model="value" @selected="pick" :editMode="editMode" />
    </v-card>
    {{/referenceClass}}

    {{^referenceClass}}
    {{#each relations}}
    {{#if (isGeneralization sourceElement.namePascalCase ../namePascalCase relationType)}}
    <v-card style="width:450px;" outlined>
        <template slot="progress">
            <v-progress-linear
                    color="deep-purple"
                    height="10"
                    indeterminate
            ></v-progress-linear>
        </template>

        <v-card-title v-if="value._links">
            {{sourceElement.namePascalCase}} # \{{value._links.self.href.split("/")[value._links.self.href.split("/").length - 1]}}
        </v-card-title >
        <v-card-title v-else>
            {{sourceElement.namePascalCase}}
        </v-card-title >

        <v-card-text>
        {{#targetElement.fieldDescriptors}}
        {{#if (isNotId nameCamelCase)}}
        {{#if (isPrimitive className)}}
            <{{getPrimitiveType className}} label="{{namePascalCase}}" v-model="value.{{nameCamelCase}}" :editMode="editMode"/>
        {{else}}
            {{#isList}}
            <{{getEntityClassNameOfList className}}List offline label="{{namePascalCase}}" v-model="value.{{nameCamelCase}}" :editMode="editMode" @change="change"/>
            {{/isList}}
            {{#checkVO className}}
            <{{className}} offline label="{{namePascalCase}}" v-model="value.{{nameCamelCase}}" :editMode="editMode" @change="change"/>
            {{/checkVO}}
            {{#checkEntityMember className}}
            <{{className}} offline label="{{namePascalCase}}" v-model="value.{{nameCamelCase}}" :editMode="editMode" @change="change"/>
            {{/checkEntityMember}}
            {{#checkListOfEntityMember className}}
            <{{getEntityClassNameOfList className}}Manager offline label="{{namePascalCase}}" v-model="value.{{nameCamelCase}}" :editMode="editMode" @change="change"/>
            {{/checkListOfEntityMember}}
        {{/if}}
        {{/if}}
        {{/targetElement.fieldDescriptors}}
        </v-card-text>

        <v-card-actions>
            <v-spacer></v-spacer>
            <v-btn
                    color="deep-purple lighten-2"
                    text
                    @click="edit"
                    v-if="!editMode"
            >
                Edit
            </v-btn>
            <v-btn
                    color="deep-purple lighten-2"
                    text
                    @click="save"
                    v-else
            >
                Save
            </v-btn>
            <v-btn
                    color="deep-purple lighten-2"
                    text
                    @click="remove"
                    v-if="!editMode"
            >
                Delete
            </v-btn>
            <v-btn
                    color="deep-purple lighten-2"
                    text
                    @click="editMode = false"
                    v-if="editMode && !isNew"
            >
                Cancel
            </v-btn>
        </v-card-actions>
        <v-card-actions>
            <v-spacer></v-spacer>
            {{#targetElement.operations}}
            <v-btn
                    v-if="!editMode"
                    color="deep-purple lighten-2"
                    text
                    {{#if (checkParam fieldDescriptors)}}
                    @click="open{{name}}"
                    {{else}}
                    @click="{{name}}"
                    {{/if}}
            >
                {{name}}
            </v-btn>
            {{#if (checkParam fieldDescriptors)}}
            <v-dialog v-model="{{name}}Diagram" width="500">
                <{{name}}Command
                        @closeDialog="close{{name}}"
                        @{{name}}="{{name}}"
                ></{{name}}Command>
            </v-dialog>
            {{/if}}
            {{/targetElement.operations}}
            {{#sourceElement.operations}}
            {{^isOverride}}
            <v-btn
                    v-if="!editMode"
                    color="deep-purple lighten-2"
                    text
                    {{#if (checkParam fieldDescriptors)}}
                    @click="open{{name}}"
                    {{else}}
                    @click="{{name}}"
                    {{/if}}
            >
                {{name}}
            </v-btn>
            {{#if (checkParam fieldDescriptors)}}
            <v-dialog v-model="{{name}}Diagram" width="500">
                <{{name}}Command
                        @closeDialog="close{{name}}"
                        @{{name}}="{{name}}"
                ></{{name}}Command>
            </v-dialog>
            {{/if}}
            {{/isOverride}}
            {{/sourceElement.operations}}
        </v-card-actions>

        <v-snackbar
                v-model="snackbar.status"
                :top="true"
                :timeout="snackbar.timeout"
                color="error"
        >
            \{{ snackbar.text }}
            <v-btn dark text @click="snackbar.status = false">
                Close
            </v-btn>
        </v-snackbar>
    </v-card>
    {{else}}
    <div style="margin: 0 -15px 0 -15px;">
        <v-card-title>
            {{namePascalCase}}
        </v-card-title>

        <v-card-text>
        {{#fieldDescriptors}}
        {{#if (isNotId nameCamelCase)}}
        {{#if (isPrimitive className)}}
            <{{getPrimitiveType className}} label="{{namePascalCase}}" v-model="value.{{nameCamelCase}}" :editMode="editMode"/>
        {{else}}
        {{#checkVO className}}
            <{{className}} offline label="{{namePascalCase}}" v-model="value.{{nameCamelCase}}" :editMode="editMode" @change="change"/>
        {{/checkVO}}
        {{#checkEntityMember className}}
            <{{className}} offline label="{{namePascalCase}}" v-model="value.{{nameCamelCase}}" :editMode="editMode" @change="change"/>
        {{/checkEntityMember}}
        {{#checkListOfEntityMember className}}
            <{{getEntityClassNameOfList className}}List offline label="{{namePascalCase}}" v-model="value.{{nameCamelCase}}" :editMode="editMode" @change="change"/>
        {{/checkListOfEntityMember}}
        {{/if}}
        {{/if}}
        {{/fieldDescriptors}}
        </v-card-text>

        <v-card-actions v-if="inList">
            <slot name="actions"></slot>
        </v-card-actions>
    </div>
    {{/if}}
    {{/each}}
    {{/referenceClass}}
</template>

<script>
    {{#referenceClass}}
    const axios = require('axios').default;
    {{/referenceClass}}
    {{^referenceClass}}
    {{#each relations}}{{#if (isGeneralization sourceElement.namePascalCase ../namePascalCase relationType)}}
    const axios = require('axios').default;
    {{/if}}{{/each}}
    {{/referenceClass}}

    export default {
        name: '{{namePascalCase}}',
        props: {
            value: [Object, String, Number, Boolean, Array],
            editMode: Boolean,
            isNew: Boolean,
            offline: Boolean,
            {{^referenceClass}}
            inList: Boolean,
            {{/referenceClass}}
            label: String,
        },
        data: () => ({
        {{#referenceClass}}
            newValue: {},
        {{/referenceClass}}
        {{^referenceClass}}
        {{#each relations}}{{#if (isGeneralization sourceElement.namePascalCase ../namePascalCase relationType)}}
            snackbar: {
                status: false,
                timeout: 5000,
                text: ''
            },
        {{#targetElement.operations}}
        {{#if (checkParam fieldDescriptors)}}
            {{nameCamelCase}}Diagram: false,
        {{/if}}
        {{/targetElement.operations}}
        {{#sourceElement.operations}}
        {{^isOverride}}
        {{#if (checkParam fieldDescriptors)}}
            {{nameCamelCase}}Diagram: false,
        {{/if}}
        {{/isOverride}}
        {{/sourceElement.operations}}
        {{/if}}{{/each}}
        {{/referenceClass}}
        }),
        async created() {
            {{#referenceClass}}
            else {
                this.newValue = this.value;
            }
            {{/referenceClass}}
            {{^referenceClass}}
            {{#fieldDescriptors}}
            {{#if (isNotId nameCamelCase)}}
            {{#if (isPrimitive className)}}
            if(!('{{nameCamelCase}}' in this.value)) {
                this.value.{{nameCamelCase}} = {{#setDefaultValue className}}{{/setDefaultValue}};
            }
            {{/if}}
            {{/if}}
            {{/fieldDescriptors}}
            {{/referenceClass}}
        },
        watch: {
            {{#referenceClass}}
            value(val) {
                this.$emit('input', val);
            },
            newValue(val) {
                this.$emit('input', val);
            },
            {{/referenceClass}}
            {{^referenceClass}}
            {{#each relations}}{{#if (isGeneralization sourceElement.namePascalCase ../namePascalCase relationType)}}
            {{else}}
            value(val) {
                this.$emit('input', val);
            },
            newValue(val) {
                this.$emit('input', val);
            },
            {{/if}}{{/each}}
            {{/referenceClass}}
        },

        methods: {
            edit() {
                this.editMode = true;
            },
            {{#referenceClass}}
            async pick(val){
                this.newValue = val;
            },
            {{/referenceClass}}
            {{^referenceClass}}
            {{#each relations}}{{#if (isGeneralization sourceElement.namePascalCase ../namePascalCase relationType)}}
            async save(){
                try {
                    var temp = null;

                    if(!this.offline) {
                        if(this.isNew) {
                            temp = await axios.post(axios.fixUrl('/{{#toURL sourceElement.nameCamelCase}}{{/toURL}}'), this.value)
                        } else {
                            temp = await axios.put(axios.fixUrl(this.value._links.self.href), this.value)
                        }
                    }

                    if(this.value!=null) {
                        for(var k in temp.data) this.value[k]=temp.data[k];
                    } else {
                        this.value = temp.data;
                    }

                    this.editMode = false;
                    this.$emit('input', this.value);

                    if (this.isNew) {
                        this.$emit('add', this.value);
                    } else {
                        this.$emit('edit', this.value);
                    }

                    location.reload()

                } catch(e) {
                    this.snackbar.status = true
                    if(e.response && e.response.data.message) {
                        this.snackbar.text = e.response.data.message
                    } else {
                        this.snackbar.text = e
                    }
                }
                
            },
            async remove(){
                try {
                    if (!this.offline) {
                        await axios.delete(axios.fixUrl(this.value._links.self.href))
                    }

                    this.editMode = false;
                    this.isDeleted = true;

                    this.$emit('input', this.value);
                    this.$emit('delete', this.value);

                } catch(e) {
                    this.snackbar.status = true
                    if(e.response && e.response.data.message) {
                        this.snackbar.text = e.response.data.message
                    } else {
                        this.snackbar.text = e
                    }
                }
            },
            {{#targetElement.operations}}
            async {{name}}({{#if (checkParam fieldDescriptors)}}params{{/if}}) {
                try {
                    if(!this.offline) {
                        var temp = await axios.put(axios.fixUrl(this.value._links['{{name}}'].href))
                        for(var k in temp.data) {
                            this.value[k]=temp.data[k];
                        }
                    }

                    this.editMode = false;
                } catch(e) {
                    this.snackbar.status = true
                    if(e.response && e.response.data.message) {
                        this.snackbar.text = e.response.data.message
                    } else {
                        this.snackbar.text = e
                    }
                }
            },
            {{#if (checkParam fieldDescriptors)}}
            open{{name}}() {
                this.{{nameCamelCase}}Diagram = true;
            },
            close{{name}}() {
                this.{{name}}Diagram = false;
            },
            {{/if}}
            {{/targetElement.operations}}
            {{#sourceElement.operations}}
            {{^isOverride}}
            async {{name}}({{#if (checkParam fieldDescriptors)}}params{{/if}}) {
                try {
                    if(!this.offline) {
                        var temp = await axios.put(axios.fixUrl(this.value._links['{{name}}'].href))
                        for(var k in temp.data) {
                            this.value[k]=temp.data[k];
                        }
                    }

                    this.editMode = false;
                } catch(e) {
                    this.snackbar.status = true
                    if(e.response && e.response.data.message) {
                        this.snackbar.text = e.response.data.message
                    } else {
                        this.snackbar.text = e
                    }
                }
            },
            {{#if (checkParam fieldDescriptors)}}
            open{{name}}() {
                this.{{name}}Diagram = true;
            },
            close{{name}}() {
                this.{{name}}Diagram = false;
            },
            {{/if}}
            {{/isOverride}}
            {{/sourceElement.operations}}
            {{else}}
            async add() {
                this.editMode = false;
                this.$emit('input', this.value);

                if(this.isNew){
                    this.$emit('add', this.value);
                } else {
                    this.$emit('edit', this.value);
                }
            },
            async remove(){
                this.editMode = false;
                this.isDeleted = true;

                this.$emit('input', this.value);
                this.$emit('delete', this.value);
            },
            change(){
                this.$emit('change', this.value);
            },
            {{/if}}{{/each}}
            {{/referenceClass}}
        }
    }
</script>


<function>
    window.$HandleBars.registerHelper('isGeneralization', function (fromName, name, type) {
        try {
            if(fromName == null || name == null || type == null) {
                return false;
            } else {
                if(fromName == name && type.includes("Generalization")) {
                    return true;
                } else {
                    return false;
                }
            }
        } catch(e) {
            console.log(e)
        }
    });

    window.$HandleBars.registerHelper('isNotId', function (className) {
        return (className != 'id')
    })

    window.$HandleBars.registerHelper('isPrimitive', function (className) {
        if(className.includes("String") || className.includes("Integer") || className.includes("Long") || className.includes("Double") || className.includes("Float")
                || className.includes("Boolean") || className.includes("Date")){
            return true;
        } else {
            return false;
        }
    })

    window.$HandleBars.registerHelper('getPrimitiveType', function (className, options) {
        if(className.includes("String")) {
            if(this.isLob) {
                return "LargeObject";
            } else {
                return "String";
            }
        } else if(className.includes("Integer") || className.includes("Long") || className.includes("Double") || className.includes("Float")) {
            if(this.isLob) {
                return "LargeObject";
            } else {
                return "Number";
            }
        } else if(className.includes("Boolean")) {
            return "Boolean";
        } else if(className.includes("Date")) {
            return "Date";
        }
    })

    window.$HandleBars.registerHelper('checkVO', function (className, options) {
        if(className.endsWith("Address") || className.endsWith("Photo") || className.endsWith("User") || className.endsWith("Email") 
                || className.endsWith("Payment") || className.endsWith("Money") || className.endsWith("Weather") || className.endsWith("Rating") ){
            return options.fn(this);
        }
    })

    window.$HandleBars.registerHelper('checkVOList', function (className, options) {
        if(className.endsWith("Address") || className.endsWith("Photo") || className.endsWith("User") || className.endsWith("Email") 
                || className.endsWith("Payment") || className.endsWith("Money") || className.endsWith("Weather") || className.endsWith("Rating") ){
            return options.fn(this);
        }
    })

    window.$HandleBars.registerHelper('checkEntityMember', function (className, options) {
        if(!(className.endsWith("Address") || className.endsWith("Photo") || className.endsWith("User") || className.endsWith("Email") 
                || className.endsWith("Payment") || className.endsWith("Money") || className.endsWith("Weather") || className.endsWith("Rating")) && className.indexOf("java.") == -1 && className.indexOf("List") == -1){
            return options.fn(this);
        } else {
            return options.inverse(this);
        }
    })

    window.$HandleBars.registerHelper('checkListOfEntityMember', function (className, options) {
        if(className.indexOf("List") == 0) {
            return options.fn(this);
        } else {
            return options.inverse(this);
        }
    })

    window.$HandleBars.registerHelper('getEntityClassNameOfList', function (listClassName) {
        var regex = /\<(.*?)\>/g;
        var match = regex.exec(listClassName);
        if (match) {
            return (match[1]);
        }
        return "NO-CLASS";
    })

    window.$HandleBars.registerHelper('setDefaultValue', function (className) {
        var date = (new Date(Date.now() - (new Date()).getTimezoneOffset() * 60000)).toISOString().substr(0, 10);
        if(className.endsWith("String")) {
            return "''";
        } else if(className.endsWith("Integer") || className.endsWith("Long") || className.endsWith("Double") || className.endsWith("Float")) {
            return 0;
        } else if(className.endsWith("Boolean")) {
            return false;
        } else if(className.endsWith("Date")) {
            return "'" + date + "'";
        } else if(className.includes("List")) {
            return "[]"
        } else {
            return "{}"
        }
    })

    window.$HandleBars.registerHelper('checkAggregation', function (relations, name, isVO, options) {
        try {
            var flag = false;
            if(!isVO) {
                if(relations) {
                    for(var i = 0; i < relations.length; i ++ ){
                        if(relations[i] != null) {
                            if(relations[i].targetElement.name == name && relations[i].relationType.includes("Aggregation")) {
                                if(relations[i] && relations[i].sourceMultiplicity == "1" && relations[i].targetMultiplicity == "1..n"){
                                    // console.log(name)
                                    flag = true;
                                    return options.fn(this);
                                } else if(relations[i] && relations[i].sourceMultiplicity == "1..n" && relations[i].targetMultiplicity == "1"){
                                    flag = true;
                                    return options.fn(this);
                                } else if(relations[i] && relations[i].sourceMultiplicity == "1" && relations[i].targetMultiplicity == "1"){
                                    flag = true;
                                    return options.fn(this);
                                }
                            }
                        }
                    }
                }
                if(!flag){
                    // console.log(flag)
                    return options.inverse(this);
                }
                // console.log(flag)
                return options.inverse(this);
            }
        } catch(e) {
          console.log(e)
        }      
    });

    window.$HandleBars.registerHelper('checkParam', function (fieldDescriptors, options) {
        try {
            if(fieldDescriptors == "undefined") {
                return false;
            } else {
                if(fieldDescriptors.length > 0) {
                    return true;
                } else {
                    return false;
                }
            }
        } catch(e) {
            console.log(e)
        }
    })

    window.$HandleBars.registerHelper('toURL', function (className) {

        var pluralize = function(value, revert) {

            var plural = {
                '(quiz)$'               : "$1zes",
                '^(ox)$'                : "$1en",
                '([m|l])ouse$'          : "$1ice",
                '(matr|vert|ind)ix|ex$' : "$1ices",
                '(x|ch|ss|sh)$'         : "$1es",
                '([^aeiouy]|qu)y$'      : "$1ies",
                '(hive)$'               : "$1s",
                '(?:([^f])fe|([lr])f)$' : "$1$2ves",
                '(shea|lea|loa|thie)f$' : "$1ves",
                'sis$'                  : "ses",
                '([ti])um$'             : "$1a",
                '(tomat|potat|ech|her|vet)o$': "$1oes",
                '(bu)s$'                : "$1ses",
                '(alias)$'              : "$1es",
                '(octop)us$'            : "$1i",
                '(ax|test)is$'          : "$1es",
                '(us)$'                 : "$1es",
                '([^s]+)$'              : "$1s"
            };

            var singular = {
                '(quiz)zes$'             : "$1",
                '(matr)ices$'            : "$1ix",
                '(vert|ind)ices$'        : "$1ex",
                '^(ox)en$'               : "$1",
                '(alias)es$'             : "$1",
                '(octop|vir)i$'          : "$1us",
                '(cris|ax|test)es$'      : "$1is",
                '(shoe)s$'               : "$1",
                '(o)es$'                 : "$1",
                '(bus)es$'               : "$1",
                '([m|l])ice$'            : "$1ouse",
                '(x|ch|ss|sh)es$'        : "$1",
                '(m)ovies$'              : "$1ovie",
                '(s)eries$'              : "$1eries",
                '([^aeiouy]|qu)ies$'     : "$1y",
                '([lr])ves$'             : "$1f",
                '(tive)s$'               : "$1",
                '(hive)s$'               : "$1",
                '(li|wi|kni)ves$'        : "$1fe",
                '(shea|loa|lea|thie)ves$': "$1f",
                '(^analy)ses$'           : "$1sis",
                '((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$': "$1$2sis",        
                '([ti])a$'               : "$1um",
                '(n)ews$'                : "$1ews",
                '(h|bl)ouses$'           : "$1ouse",
                '(corpse)s$'             : "$1",
                '(us)es$'                : "$1",
                's$'                     : ""
            };

            var irregular = {
                'move'   : 'moves',
                'foot'   : 'feet',
                'goose'  : 'geese',
                'sex'    : 'sexes',
                'child'  : 'children',
                'man'    : 'men',
                'tooth'  : 'teeth',
                'person' : 'people',
                'index'  : 'indexes'
            };

            var uncountable = [
                'sheep', 
                'fish',
                'deer',
                'moose',
                'series',
                'species',
                'money',
                'rice',
                'information',
                'equipment'
            ];

            // save some time in the case that singular and plural are the same
            // console.log("value = " + value)
            if(uncountable.indexOf(value.toLowerCase()) >= 0) {
                return this;
            }

            // check for irregular forms
            for(var word in irregular){

                if(revert) {
                    var pattern = new RegExp(irregular[word]+'$', 'i');
                    var replace = word;
                } else {
                    var pattern = new RegExp(word+'$', 'i');
                    var replace = irregular[word];
                }

                if(pattern.test(value)) {
                    return value.replace(pattern, replace);
                }
            }

            if(revert) {
                var array = singular;
            } else {
                var array = plural;
            }

            // check for matches using regular expressions
            for(var reg in array) {

                var pattern = new RegExp(reg, 'i');

                if(pattern.test(value)) {
                    return value.replace(pattern, array[reg]);
                }
            }

            return value;
        }

        return pluralize(className.toLowerCase())
    })

</function>
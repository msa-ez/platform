forEach: View
fileName: {{namePascalCase}}ViewDetail.vue
path: frontend/src/components
---
<template>

    <v-card outlined>
        <v-card-title>
            {{namePascalCase}} # \{{$route.params.id }}
        </v-card-title>

        <v-card-text>
        {{#fieldDescriptors}}
        {{#if (isNotId nameCamelCase)}}
        {{#if (isPrimitive className)}}
            <div>
                <{{getPrimitiveType className}} label="{{namePascalCase}}" v-model="item.{{nameCamelCase}}" :editMode="editMode" @change="change" />
            </div>
        {{else}}
            {{#checkVO className}}
            <{{className}} offline label="{{namePascalCase}}" v-model="item.{{nameCamelCase}}" :editMode="false" @change="change" />
            {{/checkVO}}
            {{#checkEntityMember className}}
            <{{className}} offline label="{{namePascalCase}}" v-model="item.{{nameCamelCase}}" :editMode="false" :key="false" @change="change" />
            {{/checkEntityMember}}
            {{#checkListOfEntityMember className}}
            <{{getEntityClassNameOfList className}}List offline label="{{namePascalCase}}" v-model="item.{{nameCamelCase}}" :editMode="false" @change="change" />
            {{/checkListOfEntityMember}}
        {{/if}}
        {{/if}}
        {{/fieldDescriptors}}
        </v-card-text>
    </v-card>

</template>

<script>
  const axios = require('axios').default;

  export default {
    name: '{{namePascalCase}}ViewDetail',
    props: {
      value: Object,
    },
    data: () => ({
        item : [],
    }),
    async created() {
      var params = this.$route.params;
      var temp = await axios.get(axios.fixUrl('/{{namePlural}}/' + params.id))

      this.item = temp.data;

    },
    methods: {
    }
  }
</script>


<function>
  
    window.$HandleBars.registerHelper('isNotId', function (className) {
        return (className != 'id')
    })

    window.$HandleBars.registerHelper('isPrimitive', function (className) {
        if(className.endsWith("String") || className.endsWith("Integer") || className.endsWith("Long") || className.endsWith("Double") || className.endsWith("Float")
                || className.endsWith("Boolean") || className.endsWith("Date")){
            return true;
        } else {
            return false;
        }
    })

    window.$HandleBars.registerHelper('getPrimitiveType', function (className) {
        if(className.endsWith("String")) {
            return "String";
        } else if(className.endsWith("Integer") || className.endsWith("Long") || className.endsWith("Double") || className.endsWith("Float")) {
            return "Number";
        } else if(className.endsWith("Boolean")) {
            return "Boolean";
        } else if(className.endsWith("Date")) {
            return "Date";
        }
    })

    window.$HandleBars.registerHelper('checkVO', function (className, options) {
        if(className.endsWith("Address") || className.endsWith("Photo") || className.endsWith("User") || className.endsWith("Email") 
                || className.endsWith("Payment") || className.endsWith("Money")){
            return options.fn(this);
        }
    })

    window.$HandleBars.registerHelper('checkEntityMember', function (className, options) {
        if(!(className.endsWith("Address") || className.endsWith("Photo") || className.endsWith("User") || className.endsWith("Email") 
                || className.endsWith("Payment") || className.endsWith("Money")) && className.indexOf("java.")==-1 && className.indexOf("List")==-1) {
            return options.fn(this);
        } else {
            return options.inverse(this);
        }
    })

    window.$HandleBars.registerHelper('checkListOfEntityMember', function (className, options) {
        if(className.indexOf("List")==0){
            return options.fn(this);
        } else {
            return options.inverse(this);
        }
    })

    window.$HandleBars.registerHelper('getEntityClassNameOfList', function (listClassName) {
        var regex = /\<(.*?)\>/g;
        var match = regex.exec(listClassName);
        if (match) {
            return (match[1]);
        }
        return "NO-CLASS";
    })

  window.$HandleBars.registerHelper('toURL', function (className) {

    var pluralize = function(value, revert){

      var plural = {
          '(quiz)$'               : "$1zes",
          '^(ox)$'                : "$1en",
          '([m|l])ouse$'          : "$1ice",
          '(matr|vert|ind)ix|ex$' : "$1ices",
          '(x|ch|ss|sh)$'         : "$1es",
          '([^aeiouy]|qu)y$'      : "$1ies",
          '(hive)$'               : "$1s",
          '(?:([^f])fe|([lr])f)$' : "$1$2ves",
          '(shea|lea|loa|thie)f$' : "$1ves",
          'sis$'                  : "ses",
          '([ti])um$'             : "$1a",
          '(tomat|potat|ech|her|vet)o$': "$1oes",
          '(bu)s$'                : "$1ses",
          '(alias)$'              : "$1es",
          '(octop)us$'            : "$1i",
          '(ax|test)is$'          : "$1es",
          '(us)$'                 : "$1es",
          '([^s]+)$'              : "$1s"
      };

      var singular = {
          '(quiz)zes$'             : "$1",
          '(matr)ices$'            : "$1ix",
          '(vert|ind)ices$'        : "$1ex",
          '^(ox)en$'               : "$1",
          '(alias)es$'             : "$1",
          '(octop|vir)i$'          : "$1us",
          '(cris|ax|test)es$'      : "$1is",
          '(shoe)s$'               : "$1",
          '(o)es$'                 : "$1",
          '(bus)es$'               : "$1",
          '([m|l])ice$'            : "$1ouse",
          '(x|ch|ss|sh)es$'        : "$1",
          '(m)ovies$'              : "$1ovie",
          '(s)eries$'              : "$1eries",
          '([^aeiouy]|qu)ies$'     : "$1y",
          '([lr])ves$'             : "$1f",
          '(tive)s$'               : "$1",
          '(hive)s$'               : "$1",
          '(li|wi|kni)ves$'        : "$1fe",
          '(shea|loa|lea|thie)ves$': "$1f",
          '(^analy)ses$'           : "$1sis",
          '((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$': "$1$2sis",        
          '([ti])a$'               : "$1um",
          '(n)ews$'                : "$1ews",
          '(h|bl)ouses$'           : "$1ouse",
          '(corpse)s$'             : "$1",
          '(us)es$'                : "$1",
          's$'                     : ""
      };

      var irregular = {
          'move'   : 'moves',
          'foot'   : 'feet',
          'goose'  : 'geese',
          'sex'    : 'sexes',
          'child'  : 'children',
          'man'    : 'men',
          'tooth'  : 'teeth',
          'person' : 'people',
          'index'  : 'indexes'
      };

      var uncountable = [
          'sheep', 
          'fish',
          'deer',
          'moose',
          'series',
          'species',
          'money',
          'rice',
          'information',
          'equipment'
      ];

      // save some time in the case that singular and plural are the same
      //console.log("value = " + value)
      if(uncountable.indexOf(value.toLowerCase()) >= 0)
      return this;

      // check for irregular forms
      for(var word in irregular){

          if(revert){
                  var pattern = new RegExp(irregular[word]+'$', 'i');
                  var replace = word;
          } else{ var pattern = new RegExp(word+'$', 'i');
                  var replace = irregular[word];
          }
          if(pattern.test(value))
              return value.replace(pattern, replace);
      }

      if(revert) var array = singular;
          else  var array = plural;

      // check for matches using regular expressions
      for(var reg in array){

          var pattern = new RegExp(reg, 'i');

          if(pattern.test(value))
              return value.replace(pattern, array[reg]);
      }

      return value;
    }
    return pluralize(className.toLowerCase())
  })

</function>